//
//  FeedListPresenter.swift
//  TheVargo
//
//  Created by Andre Souza on 09/07/2018.
//  Copyright (c) 2018 AndreSamples. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit
import CoreLocation

final class FeedListPresenter: NSObject {

    // MARK: - Private properties -

    private unowned let _view: FeedListViewInterface
    private let _interactor: FeedListInteractorInterface
    private let _wireframe: FeedListWireframeInterface

    private var _nexPageToken: String = ""
    private var _results: [Place] = []

    // MARK: - Lifecycle -

    init(wireframe: FeedListWireframeInterface,
         view: FeedListViewInterface,
         interactor: FeedListInteractorInterface) {
        _wireframe = wireframe
        _view = view
        _interactor = interactor
    }
}

// MARK: - Extensions -

extension FeedListPresenter: FeedListPresenterInterface {
    
    func viewDidLoad() {
        _view.showFooterLoading(false)
        _view.showLoading(true)
        _checkLocationAvailable()
    }
    
    func _loadMoreItems() {
        guard let currentLocation = LocationService.sharedInstance.locationManager.location else { return }
        _interactor.getFeed(location: currentLocation, pagetoken: _nexPageToken, completion: { [weak self] result in
            self?._handleFeedResult(result)
        })
    }
    
    func numberOfSections() -> Int {
        return 1
    }
    
    func numberOrItems(in section: Int) -> Int {
        return _results.count
    }
    
    func item(at indexPath: IndexPath) -> PlaceItemInterface? {
        return _results[indexPath.row]
    }
    
    func didSelectItem(at indexPath: IndexPath) {
        guard let placeID = _results[indexPath.row].place_id else { return }
        _wireframe.navigate(to: .detail(placeID))
    }
    
}

// MARK: - Utility -

extension FeedListPresenter {
    
    @objc private func _loadItems() {
        _view.showFooterLoading(false)
        _view.showLoading(true)
        _loadMoreItems()
    }
    
    private func _checkLocationAvailable() {
        LocationService.sharedInstance.locationManager.delegate = self
    }
    
    private func _handleFeedResult(_ result: RequestResultType<Feed>) {
        switch result {
        case .success(let feed):
            incrementFeed(feed)
            _view.showLoading(false)
            _view.showFooterLoading(true)
            _view.reloadData()
            break
        case .failure(let errorResponse):
            _view.showError(error: errorResponse, target: self, action: #selector(self._loadItems))
            break
        }
    }
    
    private func incrementFeed(_ feed: Feed) {
        if let nextPage = feed.nextPage {
            _nexPageToken = nextPage
        }
        if let results = feed.results {
            _results.append(contentsOf: results)
        }
    }
    
}

extension FeedListPresenter: CLLocationManagerDelegate {
    
    func locationManager(_ manager: CLLocationManager, didChangeAuthorization status: CLAuthorizationStatus) {
        if status == .authorizedWhenInUse {
            LocationService.sharedInstance.startUpdatingLocation()
            _loadMoreItems()
        } else if status == .denied {
            let error = ErrorResponse.init(title: "Attention", message: "No location access", hideButton: true, buttonText: "")
            _view.showError(error: error)
        }
    }
    
}
